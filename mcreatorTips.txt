---afficher une bare de boss a un mob---
import net.minecraft.server.level.ServerBossEvent;
import net.minecraft.server.level.ServerPlayer;
public class RatataEntity extends Monster {
	private final ServerBossEvent bossInfo = new ServerBossEvent(this.getDisplayName(), ServerBossEvent.BossBarColor.YELLOW, ServerBossEvent.BossBarOverlay.PROGRESS);  
	  
	@Override
	public void startSeenByPlayer(ServerPlayer player) {  
		super.startSeenByPlayer(player);  
		this.bossInfo.addPlayer(player);  
	}  
	  
	@Override  
	public void stopSeenByPlayer(ServerPlayer player) {  
		super.stopSeenByPlayer(player);  
		this.bossInfo.removePlayer(player);  
	}  
}

---drop des items a la morts---
public class RatataEntity extends Monster {
	protected void dropCustomDeathLoot(DamageSource source, int looting, boolean recentlyHitIn) {
		super.dropCustomDeathLoot(source, looting, recentlyHitIn);
		this.spawnAtLocation(new ItemStack(TestModItems.POIVRO.get()));
		this.spawnAtLocation(new ItemStack(Blocks.OBSIDIAN));
	}
}

---Ratata au dessus de eux si on a la souris sur eux----
public RatataEntity(EntityType<RatataEntity> type, Level world) {
	setCustomName(Component.literal("Ratata"));
	setCustomNameVisible(false);
}

---fait que le ratata attack le joueur le plus proche---
public class RatataEntity extends Monster {
	@Override
	protected void registerGoals() {
		super.registerGoals();

		this.targetSelector.addGoal(1, new NearestAttackableTargetGoal(this, Player.class, false, false));
		//1 = multiplicateur de la vitesse de mouvement du perso
		this.goalSelector.addGoal(2, new MeleeAttackGoal(this, 1, false) {

			@Override
			protected double getAttackReachSqr(LivingEntity entity) {
				return this.mob.getBbWidth() * this.mob.getBbWidth() + entity.getBbWidth();
			}

		});

	}
}

---envoie un message a tous les joueurs du serveur---
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.network.chat.Component;

public static void execute(LevelAccessor world, String message) {
	if (!world.isClientSide() && world.getServer() != null)
		world.getServer().getPlayerList().broadcastSystemMessage(Component.literal(message), false);
}

---envoie un message a l'entity---
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.entity.Entity;
import net.minecraft.network.chat.Component;

public static void execute(Entity sourceentity, String message) {
	if (sourceentity instanceof Player _player && !_player.level().isClientSide())
		_player.displayClientMessage(Component.literal(message), false);

}

---summon un mob---
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.entity.MobSpawnType;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.core.BlockPos;

import net.mcreator.test.init.TestModEntities;

public class ProtestProcedure {
	public static void execute(LevelAccessor world, double x, double y, double z, EntityType summonEntity) {
		if (world instanceof ServerLevel _level) {
			Entity entityToSpawn = summonEntity.spawn(_level, BlockPos.containing(x, y, z), MobSpawnType.MOB_SUMMONED);
			if (entityToSpawn != null) {
				entityToSpawn.setYRot(world.getRandom().nextFloat() * 360F);
			}
		}
	}
}
