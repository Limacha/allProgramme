/*

=== Structure du projet ===

.
├── backend/            # Logique indépendante, buffer pixel
│   └── src/lib.rs
├── frontend_native/    # Affichage natif (Windows/Linux/macOS)
│   └── src/lib.rs
├── frontend_web/       # Affichage WebAssembly (WASM + canvas)
│   └── src/lib.rs
├── frontend_web_demo/  # Démo Web (HTML + JS pour tester frontend_web)
│   └── index.html
└── unified_runner/     # Point d'entrée unique (cargo run -p unified_runner)
    └── src/main.rs

=== Usage ===

- Compile et lance selon la plateforme détectée :

  cargo run -p unified_runner

- Pour la Web, utilise wasm-pack pour builder frontend_web et charger dans frontend_web_demo.

*/

///////////////////////////
// Backend - backend/src/lib.rs
///////////////////////////

pub struct PixelBuffer {
    pub width: u32,
    pub height: u32,
    pub pixels: Vec<u8>, // RGBA 4 bytes per pixel
}

impl PixelBuffer {
    /// Créé un nouveau buffer pixel vierge
    pub fn new(width: u32, height: u32) -> Self {
        Self {
            width,
            height,
            pixels: vec![0; (width * height * 4) as usize],
        }
    }

    /// Remplit le buffer avec une couleur unie RGBA
    pub fn clear(&mut self, r: u8, g: u8, b: u8, a: u8) {
        for chunk in self.pixels.chunks_exact_mut(4) {
            chunk.copy_from_slice(&[r, g, b, a]);
        }
    }

    /// Dessine un carré coloré au centre du buffer
    pub fn draw_center_square(&mut self, size: u32, r: u8, g: u8, b: u8, a: u8) {
        let start_x = (self.width / 2).saturating_sub(size / 2);
        let start_y = (self.height / 2).saturating_sub(size / 2);

        for y in start_y..(start_y + size).min(self.height) {
            for x in start_x..(start_x + size).min(self.width) {
                let i = ((y * self.width + x) * 4) as usize;
                self.pixels[i..i + 4].copy_from_slice(&[r, g, b, a]);
            }
        }
    }
}

///////////////////////////
// Frontend natif - frontend_native/src/lib.rs
///////////////////////////

#[cfg(not(target_arch = "wasm32"))]
pub fn start() {
    use backend::PixelBuffer;
    use pixels::{Pixels, SurfaceTexture};
    use winit::{
        event::{Event, WindowEvent},
        event_loop::{ControlFlow, EventLoop},
        window::WindowBuilder,
    };

    let event_loop = EventLoop::new();

    let window = WindowBuilder::new()
        .with_title("Unified Pixels Viewer")
        .with_inner_size(winit::dpi::LogicalSize::new(320.0, 240.0))
        .build(&event_loop)
        .unwrap();

    let size = window.inner_size();
    let surface_texture = SurfaceTexture::new(size.width, size.height, &window);
    let mut pixels = Pixels::new(size.width, size.height, surface_texture).unwrap();

    event_loop.run(move |event, _, control_flow| {
        *control_flow = ControlFlow::Wait;

        match event {
            Event::RedrawRequested(_) => {
                let mut buffer = PixelBuffer::new(size.width, size.height);
                buffer.clear(0, 0, 0, 255);
                buffer.draw_center_square(50, 255, 0, 0, 255);
                pixels.get_frame().copy_from_slice(&buffer.pixels);
                pixels.render().unwrap();
            }
            Event::WindowEvent { event, .. } => match event {
                WindowEvent::CloseRequested => *control_flow = ControlFlow::Exit,
                _ => {}
            },
            Event::MainEventsCleared => window.request_redraw(),
            _ => {}
        }
    });
}

///////////////////////////
// Frontend Web - frontend_web/src/lib.rs
///////////////////////////

#[cfg(target_arch = "wasm32")]
use backend::PixelBuffer;
#[cfg(target_arch = "wasm32")]
use wasm_bindgen::prelude::*;
#[cfg(target_arch = "wasm32")]
use web_sys::{CanvasRenderingContext2d, HtmlCanvasElement, ImageData};

#[cfg(target_arch = "wasm32")]
#[wasm_bindgen]
pub fn render_to_canvas(canvas_id: &str) {
    let document = web_sys::window().unwrap().document().unwrap();
    let canvas = document.get_element_by_id(canvas_id).unwrap();
    let canvas: HtmlCanvasElement = canvas.dyn_into().unwrap();

    let context = canvas
        .get_context("2d")
        .unwrap()
        .unwrap()
        .dyn_into::<CanvasRenderingContext2d>()
        .unwrap();

    let width = canvas.width();
    let height = canvas.height();

    let mut buffer = PixelBuffer::new(width, height);
    buffer.clear(0, 0, 0, 255);
    buffer.draw_center_square(50, 255, 0, 0, 255);

    let data = ImageData::new_with_u8_clamped_array_and_sh(
        wasm_bindgen::Clamped(&buffer.pixels),
        width,
        height,
    )
    .unwrap();

    context.put_image_data(&data, 0.0, 0.0).unwrap();
}

///////////////////////////
// Démo Web (frontend_web_demo/index.html) - contenu minimal
///////////////////////////

/*

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Pixel Web Demo</title>
</head>
<body>
    <canvas id="pixels" width="320" height="240"></canvas>
    <script type="module">
        import init, { render_to_canvas } from './pkg/frontend_web.js';
        async function main() {
            await init();
            render_to_canvas("pixels");
        }
        main();
    </script>
</body>
</html>

*/

///////////////////////////
// Point d'entrée unique - unified_runner/src/main.rs
///////////////////////////

#[cfg(target_arch = "wasm32")]
fn main() {
    // WebAssembly est appelé depuis JS, donc pas d'exécution directe.
    panic!("Ce binaire WebAssembly doit être appelé depuis JavaScript (voir frontend_web_demo)");
}

#[cfg(not(target_arch = "wasm32"))]
fn main() {
    // Lancement du frontend natif sous Linux/Windows/macOS
    frontend_native::start();
}

/*

=== Cargo.toml (racine) ===

[workspace]
members = [
    "backend",
    "frontend_native",
    "frontend_web",
    "frontend_web_demo",
    "unified_runner"
]

*/

/*

=== Instructions de build ===

# Pour lancer la version native (Linux, Windows, macOS) :
cargo run -p unified_runner

# Pour la version Web (WASM) :
wasm-pack build frontend_web --target web
# Copier les fichiers générés dans frontend_web_demo/pkg
# Ouvrir frontend_web_demo/index.html dans un navigateur

*/
